[project]
name = "network-designer"
version = "2.0.0"
description = "Visual Network to Terraform Converter - Design network topologies graphically and export to Docker/Terraform"
readme = "README.md"
requires-python = ">=3.7"
license = {text = "MIT"}
authors = [
    {name = "Network Designer Team", email = "contact@example.com"},
]
keywords = ["network", "terraform", "docker", "infrastructure", "gui", "cloud", "kivy"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: System :: Networking",
    "Topic :: Software Development :: Code Generators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: X11 Applications",
]

# Runtime dependencies
dependencies = [
    "kivy>=2.2.0",
    "kivymd>=1.1.0",  # Optional: Material Design components
]

[project.urls]
Homepage = "https://github.com/example/network-designer"
Documentation = "https://network-designer.readthedocs.io"
Repository = "https://github.com/example/network-designer.git"
Issues = "https://github.com/example/network-designer/issues"

[project.scripts]
network-designer = "network_designer:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.3.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pyinstaller>=5.13.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]
lint = [
    "black>=23.3.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pylint>=2.17.4",
]
build = [
    "pyinstaller>=5.13.0",
    "wheel>=0.41.0",
    "setuptools>=68.0.0",
    "buildozer>=1.5.0",  # For mobile builds
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel", "cython>=0.29.0"]
build-backend = "setuptools.build_meta"

# ============================================
# Tool Configurations
# ============================================

[tool.uv]
# uv-specific configuration
dev-dependencies = [
    "kivy>=2.2.0",
    "kivymd>=1.1.0",
    "pytest>=7.4.0",
    "black>=23.3.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "ipython>=8.14.0",
]

[tool.uv.pip]
# Use the latest pip resolver
resolver = "backtracking"
# Compile Python files to bytecode
compile = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "test_*.py"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=network_designer",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests requiring GUI",
]

[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
select = ["E", "F", "W", "I", "N", "B", "A", "C4", "PT", "Q"]
ignore = ["E501", "B008"]
fixable = ["ALL"]
unfixable = []
target-version = "py37"

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.isort]
profile = "black"
line_length = 100

# Kivy-specific settings
[tool.kivy]
log_level = "info"
window_type = "sdl2"